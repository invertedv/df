// core functions
add:(%s + %s):{int,int},{float,float}:int,float:C:N
subtract:(%s - %s):{int,int},{float,float}:int,float:C:N
multiply:(%s * %s):{int,int},{float,float}:int,float:C:N
divide:(%s / %s):{int,int},{float,float}:int,float:C:N

exp:exp(%s):{float}:float:C:N
log:ln(%s):{float}:float:C:N
sin:sin(%s):{float}:float:C:N
cos:cos(%s):{float}:float:C:N
tan:tan(%s):{float}:float:C:N
asin:asin(%s):{float}:float:C:N
acos:acos(%s):{float}:float:C:N
atan:atan(%s):{float}:float:C:N
atan2:atan2(%s,%s):{float,float}:float:C:N
abs:abs(%s):{float},{int}:float,int:C:N
rowNumber:cast(row_number() over () AS integer)-1::int:C:N
ageMonths:cast(12 * EXTRACT(YEAR FROM age(#1, #0)) + EXTRACT(MONTH FROM age(#1, #0)) AS integer):{date,date}:int:C:N
ageYears:cast(EXTRACT(YEAR FROM age(#1, #0)) AS integer):{date,date}:int:C:N
toEndOfMonth:date_trunc('month',#0) + INTERVAL '1 Month' - INTERVAL '1 Day':{date}:date:C:N
addMonths:#0 + INTERVAL '#1 Months':{date,int}:date:C:N
year:cast(EXTRACT(YEAR FROM #0) AS integer):{date}:int:C:N
month:cast(EXTRACT(MONTH FROM #0) AS integer):{date}:int:C:N
day:cast(EXTRACT(DAY FROM #0) AS integer):{date}:int:C:N
dayOfWeek:REPLACE(to_char(#0, 'Day'), ' ', ''):{date}:string:C:N
makeDate:make_date(cast(#0 AS integer),cast(#1 AS integer), cast(#2 AS integer)):{string,string,string},{int,int,int}:date,date:C:N
replace:replace(#0,#1,#2):{string,string,string}:string:C:N
position:strpos(#0,#1)-1:{string,string}:int:C:N
randUnif:random()::float:C:N
randNorm:sqrt(-2 * ln(random())) * cos(6.283185 * random())::float:C:N

eq:cast((%s = %s) AS integer):{float,float},{int,int},{string,string},{date,date}:int,int,int,int:C:N
ne:cast((%s != %s) AS integer):{float,float},{int,int},{string,string},{date,date}:int,int,int,int:C:N
gt:cast((%s > %s) AS integer):{float,float},{int,int},{string,string},{date,date}:int,int,int,int:C:N
ge:cast((%s >= %s) AS integer):{float,float},{int,int},{string,string},{date,date}:int,int,int,int:C:N
lt:cast((%s < %s) AS integer):{float,float},{int,int},{string,string},{date,date}:int,int,int,int:C:N
le:cast((%s <= %s) AS integer):{float,float},{int,int},{string,string},{date,date}:int,int,int,int:C:N
neg:-%s:{float},{int}:float,int:C:N
and:cast((%s =1 and %s = 1) AS integer):{int,int}:int:C:N
or:cast((%s = 1 or %s = 1) AS integer):{int,int}:int:C:N
not:cast(not(%s = 1) AS integer):{int}:int:C:N
if:case when %s>0 then %s else %s end:{int,float,float},{int,int,int},{int,string,string},{int,date,date}:float,int,string,date:C:N
date:cast(cast(%s AS text) AS date):{int},{string},{date}:date,date,date:C:N
float:cast(%s AS double precision):{float},{int},{string}:float,float,float:C:N
int:cast(floor(%s) AS integer):{float},{int},{string}:int,int,int:C:N
string:cast(%s AS text):{float},{int},{string},{date}:string,string,string,string:C:N
substr:substr(%s,%s+1,%s):{string,int,int}:string:C:N
sqrt:sqrt(%s):{float},{int}:float,float:C:N
pi:3.141592654::float:C:N
sign:cast(sign(%s) AS integer):{float},{int}:int,int:C:N
mod:mod(%s,%s):{int,int}:int:C:N
pow:pow(%s,%s):{float,float},{float,int},{int,float},{int,int}:float,float,float,float:C:N
round:round(%s):{float}:float:C:N
concat:concat:{string}:string:C:Y
colMax:greatest:{float},{int},{string},{date}:float,int,string,date:C:Y
colMin:least:{float},{int},{string},{date}:float,int,string,date:C:Y
colSum:colSum:{float},{int}:float,int:C:Y
colMean:colMean:{float},{int}:float,float:C:Y
colVar:colVar:{float},{int}:float,float:C:Y
colStd:colStd:{float},{int}:float,float:C:Y

sum:sum(%s):{int},{float}:int,float:S:N
mean:avg(%s):{int},{float}:float,float:S:N
count:count(%s):{float},{int},{string},{date},{categorical}:int,int,int,int,int:S:N
max:max(%s):{float},{int},{string},{date}:float,int,string,date:S:N
min:min(%s):{float},{int},{string},{date}:float,int,string,date:S:N
quantile:percentile_disc(%s) WITHIN GROUP (ORDER BY %s):{float,float},{float,int}:float,float:S:N
median:percentile_disc(0.5) WITHIN GROUP (ORDER BY %s):{float},{int}:float,float:S:N
lq:percentile_disc(0.25) WITHIN GROUP (ORDER BY %s):{float},{int}:float,float:S:N
uq:percentile_disc(0.75) WITHIN GROUP (ORDER BY %s):{float},{int}:float,float:S:N
var:variance(%s):{float},{int}:float,float:S:N
std:stddev(%s):{float},{int}:float,float:S:N

dot:sum(%s*%s):{float,float},{int,int}:float,float:S:N
